Pour un débutant (comme moi), la comprehension de classes en Javascript peut-être un peu difficile. Il y a beaucoup des articles à propos du sujet, mais la plupart d'eux parlent d'une position avancée, et donc supposent divers informations qui n'existent pas dans l'esprit d'un/e developper/euse débutant/e. Et surtout, elles sont en anglais. Danc cet article-là, je vais essayer de remplir ce surface vide.

Note: Le français n'esp pas ma langue maternelle comme vous pouvez comprendre, donc pardonnez-moi pour les erreurs. 

Si vous pouvez lire en anglais, vous pouvez trouver cet article en anglais ici :  https://muratcanyuksel.hashnode.dev/classes-in-javascript-es6-simplified

Dans cet article, je vais premièrement présenter les classes, après je vais parler à propos des propriétés statiques (static methods) et je vais finir par parler sur extends et super mots clés.

<h1>Les Classes</h1>
Les classes en Javascript ressemblent Object constructors. Donc, si l'on est familiar avec eux, les classes seront vraiment facile à comprendre. Parce qu'ils toujours servent à la même fonction: créer des prototypes pour qu'on peut utiliser le même code encore et encore en lieu d'en frapper manuellement. Ils ne sont que nous presentent avec des nouveaux fonctionnalités qui n'existaient dans Object constructors. Alors, sans plus tarder, on va créer un class:

FIRST CODE SNIPPET
Don, notre class des mots a une méthode constructor dedans. Les arguments aura le nom de notre oiseau, son âge, et s'il pourrait voler ou pas.
La méthode  constructor sera immédiatement appelée dès que nous l'invoquons via le mot-clé "new". On utilise le mot-clé "new" pour créer un instance de class. Alors, Créons une instance appelée birdLarry:
SECOND CODE SNIPPET
On voit que pour créer une nouvelle instance de class, on définit une variable (birdLarry), et après la marque d'équation, on écrit le mot-clé "new" suivi du nom de la classe qu'on souhaite invoquer (Bird, dans notre cas).
Alors, si l'on écrirait birdLarry.name; à la console, le résultat serait "Larry. Si l'on écrirait birdLarry.age; le résultat sérait le numéro 4. Et si l'on écrirait birdLarry.canFly, le résultat sérait "true".

Jusqu'ici tout va bien.

Ajoutons quelques méthodes supplémentaires à la classe Bird.
3RD CODE SNIPPET
On a fait quoi ici? La méthode nameAge donnera des informations sur l'instance Bird. Comme si l'on écrirait,
birdLarry.nameAge(); le résultat sérait "Larry is 2 years old." Pourtant, super simple. Mais, si l'on voulait changer le nom de l'oiseau? Dis-donc, de Larry à Clumsy? et si l'on voulait changer le nom aussi? 
Parce que j'ai l'impression qu'un oiseau nommé Clumsy (maladroit) doit être assez jeune. Ajoutons les méthodes.
4th CODE SNIPPET
Avec ce code nouvellement ajouté,on peut modifier le nom et l'âge de l'oiseau. Donc, si l'on écrirait birdLarry.setName("Clumsy"); et appellerait birdLarry.name; le résultat sérait "Clumsy" depuis qu'on a modifié le nom d'origine de l'instance de class. Aussi, depuis que Clumsy doit être un peu jeune, on voudrait modifier son âge aussi en écrivant birdLarry.setAge(2) dans la console.Maintenant, chaque fois que l'on appele birdLarry.age; le résultat serait 2.

Puff, heureux que l'on ait eu fini avec ça, car ce qui vient ensuite est beaucoup plus intéressant que ces bases :)
<h1>Les méthodes Statiques</h1>

Et si on voudrait ajouter des méthodes non pas pour les instances mais pour la classe elle-même? Eh bien, avec avec la fonctionnalité des classes en ES6, ce sera hyper facile! Alors, on prends les class Bird et voit c'est quoi on peut faire avec lui en utilisant les méthodes statiques( j'écris pas les métdodes supplémentaires par souci de simplicité et d'espace(:
5TH CODE SNIPPED
Wowowowow, tranquille-toi mec, que se passe-t-il ici? ALors, ce qu'on a fait était d'ajouter deux méthodes statiques: La première renvoie à quel règne biologique appartiennent les oiseaux (Animalia, car ce sont bien des animaux), et le second renvoie une phrase utilisant le royaume. On voit que j'ai utilisé le mot-clé "this" ici. C'est une partie intéressante de la méthode statique: Alors que le mot-clé "this" ferait normalement référence à l'instance de classe s'il s'agissait d'une méthode ordinaire; à l'intérieur d'une méthode statique, il se réfère à la classe elle-même. Attends attends, qu'est-ce que ça veut dire? Supporte-moi un peu.
Alors, si l'on écrirait `birdLarry.kingdom()`, le résultat serait quelque chose comme Uncaught TypeError: birdLarry.kingdom is not a function at <anonymous>:1:11 Uf. Mais pourquoi?

Comme je l'ai mentionné dans la phrase d'ouverture de cette section, les méthodes statiques fonctionnent avec la classe elle-même, pas avec ses instances.Et `birdLarry` est une instance de classe Bird. Donc, la méthode statique ne fonctionnerait pas de tout.Par contre, la méthode statique ne fonctionnerait qu'avec la classe Bird. Comme ça: `Bird.kingdom()` retournerait "Animalia". Et si l'on écrirait `Bird.kingdomSentence() ` il retournerait "Birds belong to the kingdom Animalia". Assez chouette eh?
Maintenant, il existe une autre façon d'écrire ces méthodes statiques. Ils sont appelés propriétés statiques. Voyons comment ils fonctionnent.




