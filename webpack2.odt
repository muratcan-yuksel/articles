From webpack-academy
the problem is he uses yarn instead of npm

- after installing webpack, goes to the package.json file
-under “license”, adds the following:
“scripts: {
“build”: “webpack”
}
-the above “build” is called “script name”. Its name can be ANYTHING you want.

Video 2----------
-created webpack.config.js
-creates the following:
module.exports = {
entry: “./src/index.js”
output: {
	filename: “bundle.js”
	}
}
-the above “entry” specifies to first file that’ll kick start the dependency tree
-output tells the webpack where to bundle everything. I guess this is what I know as “main.js”. I have to check tho’.

-------video 3/ changing the bundle location---------
-we’re still in the webpack.config.js
-we change the code as follows:
-we add the following to the top of the file
const path= require(“path”);

 module.exports = {
entry: “./src/index.js”
output: {
	filename: “bundle.js”
	path: path.joing(__dirname, “build”)
	}
};
-says that webpack will always look for an absolute path
-this will create a “build” folder. This folder is the one I know as “dist” folder.
-because if we changed the name into “dist”, a “dist” folder would be created

------Video 4/ dependency graph----------

-he’s talking about how to import and export
-to import: import fooString from “./foo.js” //you know this
-also, you don’t even need to write “./foo.js”, you can just write “./foo” and webpack will read as if there was .js automatically

-----video 5//watch mode-----

-he goes back to package.json file
-under scripts, and under “build”: “webpack”, he writes the watch function.
-I’ll write how that “scripts” looks altogether:
“scripts: {
“build”: “webpack”,
“watch”: “webpack --watch”
}
-then he runs “yarn watch” on terminal. Wonder what’s the npm equivalent of it.
-probably npm or npx watch. Dunno.
-he wrote node dist/bundle.js and got a dependency tree on the terminal. Interesting.

-------video 6-7//Loaders and Rules_---------
-first of all, he goes back to webpack.config.js
-adds the following under output, so after output, not inside of it, this is a different thing:

module: {
	rules: [
		{
		test: /\.js$/,
		use: “babel-loader”
		},
	{
		test:/\.css$/,
		use:[
			“style-loader”,
			“css-loader”,
			“sass-loader”
		    ]
	
	}
	
		]
}

-”test” says match this regex, and perform a transformation based on it
-so the above code says this:
-“whenever you come across a “js” file, USE “babel loader”. Simple, isn’t it?

-for the second part, the .css file, he reminds that webpack reads from inside out. Like, Javascript reads from top to bottom, whereas in these cases with that “use”, webpack reads from bottom to top

-----video 8 Loaders and Rules (continues) ------
-let’s start with what we have from the previous lesson
module: {
	rules: [
		{
		test: /\.js$/,
		use: “babel-loader”
		},
	{
		test:/\.css$/,
		use:[
			{loader: “style-loader”},
			{loader: “css-loader”},
			“sass-loader”
		    ]
	
	},
		{
			test: /\.jpeg$/,
			use: [
				{loader: “url-loader”, options: {
									limit:10000
										}
				]

		}
	
		]
}

-first, we can write the loaders as if they wre objects, check the style and css loader above
-with the url loader, he’s limiting the image file size to 10000 bytes but I didn’t really get the reason for it tbh

-----video 9/ loaders and rules continues---------------------

-this video is about actually using the loaders
- he does this in the terminal “yarn add file-loader –-dev”, so you’d do the same in npm form
-now he has “file-loader”
-he has a logo (a jpg file), let’s call it logo.jpg
-he goes to index.js and imports it like this:
import “logo.jpg”;
-that’s all

----- video 10 / Plugins --------

-what’s the difference between loaders and plugins?
-his basic answer is ” plugins do whatever the loaders can’t”
----- video 11 / plugins------ 
-he has created a very basic plugin
-it’s a file named examplePlugin.js
-inside of it, there’s this code:

class examplePlugin {
	apply(compiler){
		compiler.plugin(“run”, (compiler, callback)=>{
			console.log(“webpack is running);
			callback();
		})
	
	}


} 

module.exports= example.plugin

-so what this does is, whenever it’s used, it’ll console log its message

-now let’s see how to use these plugins
-goes back to webpack.config.js
-calls the plugin on the top of the page like this:

const examplePlugin= require (“./examplePlugin.js”);

-then creates a plugins array in the module, like this: (after the rules array)

plugins: [
	//since plugins are classes:
	new examplePlugin()

]
-runs yarn build and gets the console log

- so whenever you want to use a plugin, you add it to your file, and pass it in the plugins array as specified above


