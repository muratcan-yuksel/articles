Basic Promise Usage
The new Promise() constructor should only be used for legacy async tasks, like usage of setTimeout or XMLHttpRequest. A new Promise is created with the new keyword and the promise provides resolve and reject functions to the provided callback:

var p = new Promise(function(resolve, reject) {
	
	// Do an async task async task and then...

	if(/* good condition */) {
		resolve('Success!');
	}
	else {
		reject('Failure!');
	}
});

p.then(function(result) { 
	/* do something with the result */
}).catch(function() {
	/* error :( */
}).finally(function() {
   /* executes regardless or success for failure */ 
});

----------------------------------
CALLBACKS are basically saying to JS "when this piece of code is done, execute that one"
promises do the same, but they are more powerful.

an example:

import loadImagePromised from './load-mage-promised'

let catLoaded= loadImagePromised("images/cat3.jpg")

whenCatLoaded.then ((img)=>{
let imgElement= document.createElement("img")
imgElement.src= img.src
document.body.appendChild(imgElement)
})

---------
FUN FUN FUNCTION GUY gave this example:

function loadImage(url){

	return new Promise ((resolve, reject)=>{
	let image = new Image();
	
	image.onload= function () {
	resolve(image)
	}
	
	image.onerror= function () {
	let message=
	"could not load image at" + url
	reject(new Error(msg))
	}
	
	image.src= url;
	
	})
	
	}
	he exported this function like export {loadImage}
	
	then, on a different module, he imported it
	
	import loadImage from "./load-image-callbacked"
	
	let addImg= (src) =>{
	let imgElement=
	document.createElement("img")
	imgElement.src=src;
	document.body.appandChild(imgElement)
	}
	
	Promise.all([
	//now he's making a promise array you see
	loadImage('images/cat1.jpg'),
	loadImage('images/cat2.jpg'),
	loadImage('images/cat3.jpg')
	]).then((images)=>{
	console.log(images)
	images.forEach(img => addImg(img.src))
	}).catch((error)=>{
	//handle error later
	})
